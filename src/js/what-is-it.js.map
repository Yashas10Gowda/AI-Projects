{"version":3,"file":"what-is-it.js","sourceRoot":"","sources":["../what-is-it.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAIhE,IAAa,GAAG,GAAhB,MAAa,GAAI,SAAQ,UAAU;IAI/B;QACI,KAAK,EAAE,CAAC;QA6BZ,cAAS,GAAY,IAAI,CAAC;QAC1B,cAAS,GAAW,EAAE,CAAC;QACvB,gBAAW,GAAc,EAAE,CAAC;QA9BxB,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YAC7B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IA4BD,MAAM,CAAC,CAAQ;QACX,IAAI,IAAI,GAAK,CAAC,CAAC,MAA2B,CAAC,KAAkB,CAAC,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED,MAAM;QACF,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,EAAE;YACzC,OAAO;SACV;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC7C,IAAI,gBAAgB,GAAY,KAAK,CAAC;YACtC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;gBAC/B,gBAAgB,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAA,iCAAkC,UAAU,CAAC,SAAoB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAC1H,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,EAAE;gBACnB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAA,uDAAuD,CAAC,CAAC;aACtF;YACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,KAAK;QACD,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAA;;;;;;;;;wCASqB,IAAI,CAAC,SAAS;;yEAEmB,IAAI,CAAC,MAAM;;qEAEf,IAAI,CAAC,MAAM,aAAa,IAAI,CAAC,SAAS;qEACtC,IAAI,CAAC,KAAK;;;;;;cAMjE,IAAI,CAAC,WAAW;;mBAEX,IAAI,CAAC,SAAS;SACxB,CAAC;IACN,CAAC;CACJ,CAAA;AArFU,UAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;KAkBlB,CAAC;AA5BF;IADC,KAAK,EAAE;kCACQ;AA+BhB;IADC,KAAK,CAAC,KAAK,CAAC;gCACU;AAjCd,GAAG;IADf,aAAa,CAAC,YAAY,CAAC;GACf,GAAG,CAiGf;SAjGY,GAAG","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, state, query } from 'lit/decorators.js';\ndeclare var mobilenet: any;\n\n@customElement('what-is-it')\nexport class WII extends LitElement {\n    @state()\n    protected model;\n\n    constructor() {\n        super();\n        mobilenet.load().then((mmodel) => {\n            this.model = mmodel;\n            this.isLoading = false;\n        });\n    }\n\n    static styles = css`\n        p{\n            text-align:center;\n        }\n        .tinit-center{\n            max-width:500px;\n            margin: 0 auto;\n            text-align:center;\n        }\n        .center{\n            text-align:center;\n        }\n        sl-tag{\n            margin : 2px 2px;\n        }\n        input,img{\n            display:none;\n        }\n    `;\n\n    @query('img')\n    img!: HTMLImageElement;\n    isLoading: boolean = true;\n    imagelink: string = '';\n    predictions: unknown[] = [];\n\n    change(e: Event) {\n        let file = ((e.target as HTMLInputElement).files as FileList)[0];\n        this.imagelink = window.URL.createObjectURL(file);\n        this.requestUpdate();\n    }\n\n    submit() {\n        if (this.isLoading || this.imagelink === \"\") {\n            return;\n        }\n        this.isLoading = true;\n        this.predictions = [];\n        this.requestUpdate();\n        this.model.classify(this.img).then(predictions => {\n            let atleastOneExists: boolean = false;\n            predictions.forEach((prediction) => {\n                atleastOneExists = true;\n                this.predictions.push(html`<sl-tag pill type = \"success\">${(prediction.className as string).toUpperCase()}</sl-tag>`);\n            });\n            if (!atleastOneExists) {\n                this.predictions.push(html`<sl-tag pill type =\"danger\">Nothing Detected</sl-tag>`);\n            }\n            this.isLoading = false;\n            this.requestUpdate();\n        });\n    }\n\n    reset() {\n        this.imagelink = '';\n        this.predictions = [];\n        this.requestUpdate();\n    }\n\n    render() {\n        return html`\n        <div class=\"tinit-center\">\n            <p>To detect what the object is!... digitally\n                <br>\n                <small>This might help you ;)</small>\n            </p>\n            <br>\n                <label for=\"photo\">\n                    <sl-tag pill size=\"large\" type=\"primary\"><sl-icon id=\"icon\" name=\"link-45deg\"></sl-icon> Select An Image</sl-tag>\n                    <sl-avatar image=\"${this.imagelink}\" shape=\"rounded\"><sl-icon slot=\"icon\" name=\"image\"></sl-icon></sl-avatar>\n                </label>\n                <input id=\"photo\" type=\"file\" accept=\"image/*\" @change=${this.change}>\n            <div class=\"center\">\n                <sl-button pill size=\"small\" type=\"primary\" @click=${this.submit} ?loading=${this.isLoading}>Submit</sl-button>\n                <sl-button pill size=\"small\" type=\"default\" @click=${this.reset}>Reset</sl-button>\n            </div>\n            <br>\n            <br>\n            <slot name=\"label\">Predictions:</slot>\n            <br>\n            ${this.predictions}\n        </div>\n        <img src=${this.imagelink}>\n        `;\n    }\n}"]}